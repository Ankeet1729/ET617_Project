import os
import json
import google.generativeai as genai
from dotenv import load_dotenv
from PIL import Image
import io

# --- 1. Setup ---
# This setup is the same as in your other scripts.
load_dotenv()
api_key = os.getenv("api_key")
if not api_key:
    raise ValueError("API key not found. Please set the 'api_key' in your .env file.")
genai.configure(api_key=api_key)

# Create a directory to save the generated images
if not os.path.exists("quiz_images"):
    os.makedirs("quiz_images")

# --- 2. Image Generation Function ---
def generate_image_for_question(question_text: str, image_path: str):
    """
    Generates a 400x400 image for a given quiz question using a Gemini model.
    """
    try:
        # Use a powerful model that supports image generation, like gemini-1.5-pro.
        model = genai.GenerativeModel('gemini-1.5-pro')
        
        # A clear prompt helps the model create a relevant image.
        image_prompt = (
            "Generate a simple, clear, 400x400 pixel educational illustration for a quiz. "
            f"The image should visually represent the core concept of this question: '{question_text}'"
        )
        
        # Generate the content
        response = model.generate_content(image_prompt)
        
        # Access the raw image data from the response
        image_data = response.parts[0].inline_data.data
        
        # Use Pillow library to open the image data and save it
        image = Image.open(io.BytesIO(image_data))
        image.save(image_path)
        print(f"   ✅ Image saved to {image_path}")
        return image_path

    except Exception as e:
        print(f"   ❌ Failed to generate image. Error: {e}")
        return None

# --- 3. Main Workflow ---
def add_images_to_quiz(input_json_path: str, output_json_path: str):
    """
    Reads a quiz file, generates images for questions that need them,
    and saves a new quiz file with image paths.
    """
    try:
        with open(input_json_path, "r", encoding="utf-8") as f:
            quiz_data = json.load(f)
    except FileNotFoundError:
        print(f"Error: Input file not found: {input_json_path}")
        return

    print(f"\nProcessing {input_json_path} to add images...")

    # Iterate through both 'multiple_choice' and 'true_false' questions
    for q_type in ["multiple_choice", "true_false"]:
        for i, question in enumerate(quiz_data.get(q_type, [])):
            if question.get("needs_image"):
                print(f" - Generating image for: '{question['question'][:60]}...'")
                
                # Create a unique file path for the new image
                image_filename = f"module_{input_json_path[-6]}_{q_type}_q{i+1}.png"
                image_filepath = os.path.join("quiz_images", image_filename)
                
                # Call the function to generate and save the image
                generated_path = generate_image_for_question(question['question'], image_filepath)
                
                # Add the new 'image_path' key to the question object
                question['image_path'] = generated_path

    # Save the updated data to the new output file
    with open(output_json_path, "w", encoding="utf-8") as f:
        json.dump(quiz_data, f, indent=4)
        
    print(f"\n✨ Success! Updated quiz saved to {output_json_path}")

if __name__ == "__main__":
    # Process each quiz file generated by genQuiz.py
    for i in range(1, 4):
        input_file = f"module_quiz-{i}.json"
        output_file = f"module_quiz_with_images-{i}.json"
        add_images_to_quiz(input_file, output_file)